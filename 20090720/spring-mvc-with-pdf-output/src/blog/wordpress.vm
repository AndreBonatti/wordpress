$blog_header

Spring MVC takes the Model View Controller to the next level. It allows developers to separate each component of the MVC pattern very cleanly.

This tutorial will show you guys how to output the View in 2 different formats (PDF, and Excel) just by switching a configuration file. First we will display the page as a PDF then thru a configuration change the page will show up as an excel sheet.

<strong>First we start with a blank Project</strong>

Follow the instructions on setting up and configuring a basic application here:
<a href="http://numberformat.wordpress.com/2009/07/19/spring-mvc-hello-world/">http://numberformat.wordpress.com/2009/07/19/spring-mvc-hello-world/</a>

Since we are working with PDF iText API we need to add one additional dependency to the maven pom.xml file.

[sourcecode language="xml" gutter="false"]
		<dependency>
			<groupId>com.lowagie</groupId>
			<artifactId>itext</artifactId>
			<version>1.3</version>
		</dependency>
[/sourcecode]

Save and regenerate the eclipse project files by dropping to the command line, cd to the project folder and typing:

mvn eclipse:clean eclipse:eclipse

spring-servlet.xml should look like this

[sourcecode language="xml" gutter="false"]



<beans>	

	<bean name="/helloWorld" class="test.HelloWorldController">
	</bean>

  <bean id="mixedResolver" class="org.springframework.web.servlet.view.ResourceBundleViewResolver">
<property name="order" value="1"></property>
<property name="basename" value="views"></property>
  </bean>
</beans>
[/sourcecode]

views.properties should look like this...

[sourcecode language="shell" gutter="false"]
#--------------------------------
# PDF
#--------------------------------
helloWorld.class=test.web.view.HelloWorldPdfView

[/sourcecode]

The following java class has code that constructs the actual PDF. Here we are using iText library API to construct the page. Other API's such as FOP can be used as well however they are beyond the scope of this simple tutorial.

HelloWorldPdfView.java should look like this...

[sourcecode language="java" gutter="false"]
package test.web.view;

import java.util.Map;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.view.document.AbstractPdfView;

import com.lowagie.text.Chunk;
import com.lowagie.text.Document;
import com.lowagie.text.FontFactory;
import com.lowagie.text.Paragraph;
import com.lowagie.text.pdf.PdfWriter;

public class HelloWorldPdfView extends AbstractPdfView {

    @Override
    protected void buildPdfDocument(
        Map model,
        Document document,
        PdfWriter writer,
        HttpServletRequest request,
        HttpServletResponse response)
    throws Exception {

        Paragraph header = new Paragraph(new Chunk(
            "This is a PDF from the Hello World Web App",
            FontFactory.getFont(FontFactory.HELVETICA, 24)));
        document.add(header);

    }

}
[/sourcecode]

To view the PDF navigate to the following URL:

<a href="http://localhost:8080/helloWorldPDF/app/helloWorld">http://localhost:8080/helloWorldPDF/app/helloWorld</a>

A PDF should have displayed after navigating to the above URL.

Before we continue further we need to define some data to display on the page. We can only take  a single "hello World" line so far. For the next part we will define some data to display in Excel and in raw XML.
<table border="1">
<tbody>
<tr>
<th>Make</th>
<th>Model</th>
<th>Year</th>
</tr>
<tr>
<td>Ford</td>
<td>Mustang</td>
<td>1966</td>
</tr>
<tr>
<td>Chevrolet</td>
<td>Corvette</td>
<td>1978</td>
</tr>
<tr>
<td>Chevrolet</td>
<td>Chevelle</td>
<td>1968</td>
</tr>
</tbody></table>
To get a list of these beans we need to define the Car bean:

[sourcecode language="java" gutter="false"]
package test;

public class Car {
	private String make;
	private String model;
	private String year;

	public Car(String make, String model, String year) {
		this.make = make;
		this.model = model;
		this.year = year;
	}
	public String getMake() {
		return make;
	}
	public void setMake(String make) {
		this.make = make;
	}
	public String getModel() {
		return model;
	}
	public void setModel(String model) {
		this.model = model;
	}
	public String getYear() {
		return year;
	}
	public void setYear(String year) {
		this.year = year;
	}

}
[/sourcecode]

The Controller needs to be modified to return a list of classic cars so that they can be displayed by the view.

[sourcecode language="java" gutter="false"]
package test;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.AbstractController;

public class HelloWorldController extends AbstractController {
	@Override
	protected ModelAndView handleRequestInternal(HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		ModelAndView mav = null;
		// control logic goes here
		mav = new ModelAndView("helloWorld");

		// Its bad but to keep things simple we will do
		// some business logic here.
		List<car> cars = new ArrayList<car>();

		cars.add(new Car("Ford", "Mustang", "1966"));
		cars.add(new Car("Chevrolet","Corvette","1978"));
		cars.add(new Car("Chevrolet","Chevelle","1968"));

		mav.addObject("cars", cars);

		return mav;
	}
}
[/sourcecode]

We need to define the View that will generate the excel sheet:

[sourcecode language="java" gutter="false"]
package test.web.view;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.web.servlet.view.document.AbstractExcelView;

import test.Car;

public class HelloWorldExcelView extends AbstractExcelView {

    @Override
    protected void buildExcelDocument(
        Map model, HSSFWorkbook workbook, HttpServletRequest request, HttpServletResponse response)
    throws Exception {

        List<car> cars = (List<car>)model.get("cars");

    	HSSFSheet dataSheet = workbook.getSheet("ClassicCar");

        int row = 4;
        for (Car car : cars) {
            int column = 0;
            getCell(dataSheet, row, ++column).setCellValue(car.getMake());
            getCell(dataSheet, row, ++column).setCellValue(car.getModel());
            getCell(dataSheet, row, ++column).setCellValue(car.getYear());
            row++;
        }

    }
}
[/sourcecode]

Then we need to define the excel sheet template that will be used to generate the excel sheet.
<a href="http://www.vermatech.com/wordpress/helloWorld.xls">helloWorld.xls</a>
Save this excel sheet in WEB-INF/excel/helloWorld.xls 


Modify views.properties to look like this:
[sourcecode language="shell" gutter="false"]
#--------------------------------
# Excel
#--------------------------------
helloWorld.class=test.web.view.HelloWorldExcelView
helloWorld.url=/WEB-INF/excel/helloWorld

#--------------------------------
# PDF
#--------------------------------
#helloWorld.class=test.web.view.HelloWorldPdfView
[/sourcecode]


$blog_footer
