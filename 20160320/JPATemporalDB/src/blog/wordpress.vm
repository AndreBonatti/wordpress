This page is about storing and fetching data into tables that keep history using JPA 2. The method of implementing a relational database table and JPA code to allow storage of temporal information. This page uses a built-in HSQLDB database that outputs to a text file in the users home directory. No database configuration is needed.

$blog_header

<h3>Software Stack</h3>
<ol>
<li>Java 8</li>
<li>Java EE 6</li>
<li>JPA 2</li>
<li>OpenEBJ 4.7</li>
</ol>

<h3>Pure JPA Approach</h3>

In the example below we will maintain user account information. Since both id and valid_to_ts is in the primary key we can store multiple records for the same user id each with its own valid_to time stamp. The current valid record is indicated with a valid_to_ts as '9999-12-31'.

To expire the existing record we update the value to current time stamp and insert a new record with time stamp that expires in the future ex. '9999-12-31'. The data managers will perform the update and insert operation within the context of a transaction.

[code light='true']
 --------------------------
| User                     |
|--------------------------|
| id : varchar(320)        |
| valid_to_ts : datetime   |
|--------------------------|
| password : char(40)      |
| created_dt : datetime    |
| modified_dt : datetime   |
| valid_from_ts : datetime |
 --------------------------
[/code]

Advantages:
All current and historical information about a Entity is on a single table.

Disadvantages:
Because the "valid_to_ts" column will be update to reflect the time record was updated, you will not be able to use foreign key relations for these temporal tables.


<h3>A word about time zones and MAX dates</h3>

The valid_to_ts needs to have a time component since we need to record the time the record was expired and replaced with a new record. 

The java.util.Date value represents the number of mili-seconds since January, 1 1970 midnight UTC. To indicate a end date of 9999-12-31 UTC the value is: 253402214400000. JDBC stores time stamps based on the time zone JVM is in. For example try to store the value of java.util.Date(0) into the database. On a JVM and database located in the "America/New_York" time zone the column value is stored with 1969-12-31 19:00:00.000000. This is (UTC-5). This is a problem because a JVM located in a different time zone like UTC will read the value literally as 1969-12-31 19:00:00.000000 which is wrong.

Solutions:
<ol>
<li>Accept the fact that dates stored in the database are from a defined time zone like America/New_York and only use JVMs configured to that time zone. For example in your startup code put the following line: TimeZone.setDefault(TimeZone.getTimeZone("America/New_York")); In New York, Don't use EDT or EST since those change from summer to winter. </li>
<li>Store the time stamps as long. Use this approach if your JVMs run from different locations than your database. Its easy to convert and compare equality</li>
</ol>

For the purpose of this page we will assume the JVM and database are in the same time zone (America/New_York) and the "END" time stamp for current records is '9999-12-31 00:00:00' local time which is (10000-1-1 05:00:00 UTC). 
 
It's useful to define the END_TS as a final constant somewhere in your code-base. This will save you the effort of creating an object that represents this value using java Calendar etc... 

[code light='true']
	public static final Date END_TS = new Date(253402214400000L);
[/code]


<h3>Test Case</h3>

The following Junit test case exercises the code. See the testAddUser() and testUpdateUser() tests is where the interesting things happen. Results get saved into your $HOME/data and $HOME/logs directories.

src/test/java/org/test/UserManagerServiceTest.java
[code light='true']
#include("src/test/java/org/test/UserManagerServiceTest.java")
[/code]



<h3>Temporal Interface</h3>

The following interface should be placed on any entity that you want history on.

src/main/java/org/test/Historical.java
[code light='true']
#include("src/main/java/org/test/Historical.java")
[/code]

<h3>HistoricalCrudDataManagerImpl</h3>


The following data manager base class has been modified to handle recording of history for each entity. Since the valid_to_ts appears in the primary key, In JPA 2 you can't modify any part of the key directly. You need to query the entity, remove(), flush(), detach() it. Once detached you may update the PK and then persist(). An example of this is seen in the below data manager.

src/main/java/org/test/HistoricalCrudDataManagerImpl.java
[code light='true']
#include("src/main/java/org/test/HistoricalCrudDataManagerImpl.java")
[/code]

<h3>User Entity</h3>

The user entity just needs to have the validToTs field since its part of the primary key. The rest of the time stamp values like update, created, validFrom time stamps are in a embedded object to make the entity class look a bit more cleaner.

src/main/java/org/test/User.java
[code light='true']
#include("src/main/java/org/test/User.java")
[/code]


Nothing really interesting happening in the rest of the code. You may checkout the Git repository for this page if interested.


<h3>Maven Configuration</h3>

pom.xml
[code language='xml' light='true']
#include("pom.xml")
[/code]

<h3>Run the test case</h3>
The test case should run with no problems.

Database will go to the users $HOME/data directory. Logs will go to $HOME/logs.

Title: Temporal Tables using JPA 2